import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import {restGetIssues, restPutIssue} from './issueAPI';

const selectedItems = window.localStorage.getItem("selected");

const initialState = {
  value: 0,
  status: 'idle',
  pending: false,
  issues: [],
  selectedIds: selectedItems ? JSON.parse(selectedItems) : [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getIssuesAsync = createAsyncThunk(
  'issue/fetchIssues',
  async () => {
    // The value we return becomes the `fulfilled` action payload
    return await restGetIssues();
  }
);

export const putIssuesAsync = createAsyncThunk(
  'issue/putIssues',
  async (newStatus, thunkAPI) => {
    const {data} = thunkAPI.getState();
    const issues = data.issues.filter(issue => data.selectedIds.includes(issue.id));

    return await Promise.all(issues.map(async issue => {
      // const b = issue;
      return await restPutIssue(issue.id, {...issue, status: newStatus});
    }))
  }
);

export const issuesSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearSelected: (state) => {
      state.selectedIds = [];
      window.localStorage.removeItem("selected");
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    toggleIssue: (state, action) => {
      if (state.selectedIds.includes(action.payload)) {
        state.selectedIds = state.selectedIds.filter(id => action.payload !== id);
      } else {
        state.selectedIds.push(action.payload);
      }
      window.localStorage.setItem("selected", JSON.stringify(state.selectedIds));
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getIssuesAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getIssuesAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.issues = action.payload;
      })
      .addCase(putIssuesAsync.pending, (state) => {
        state.pending = true;
      })
      .addCase(putIssuesAsync.fulfilled, (state, action) => {
        for (const item of action.payload) {
          const index = state.issues.findIndex(issue => issue.id === item.id);
          if (index >= 0) {
            state.issues[index] = item;
          }
        }
        state.selectedIds = [];
        state.pending = false;
        window.localStorage.removeItem("selected");
      })
      .addCase(putIssuesAsync.rejected, (state, action) => {
        console.error('rejected')
      });
  },
});

export const {clearSelected, toggleIssue} = issuesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectIssues = (state) => state.data.issues;
export const selectStatus = (state) => state.data.status;
export const selectedIssues = (state) => state.data.selectedIds;
export const selectedPending = (state) => state.data.pending;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/*export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectIssues(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};*/

export default issuesSlice.reducer;
